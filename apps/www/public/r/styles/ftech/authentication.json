{
  "$schema": "https://ui.ftech.ltd/schema/registry-item.json",
  "name": "authentication",
  "type": "registry:block",
  "title": "Authentication",
  "author": "shadcn (https://ui.ftech.ltd)",
  "description": "A collection of authentication components",
  "dependencies": [
    "react",
    "date-fns",
    "lucide-react",
    "react-day-picker",
    "react-hook-form",
    "react-phone-number-input",
    "@tanstack/react-query",
    "js-cookie",
    "axios",
    "sonner",
    "dayjs",
    "numeral",
    "clsx",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "calendar",
    "popover",
    "form",
    "command",
    "scroll-area",
    "alert"
  ],
  "files": [
    {
      "path": "blocks/auth/components/form/date-range.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { CalendarIcon } from \"lucide-react\"\nimport { DateRange } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\ninterface DatePickerWithRangeProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  date?: DateRange\n  onDateChange: (date: DateRange | undefined) => void\n  placeholder?: string\n}\n\nexport function DatePickerWithRange({\n  className,\n  date,\n  onDateChange,\n  placeholder = \"Pick a date\",\n}: DatePickerWithRangeProps) {\n  return (\n    <div className={cn(\"grid gap-2\", className)}>\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button\n            id=\"date\"\n            variant={\"outline\"}\n            className={cn(\n              \"w-[300px] justify-start text-left font-normal\",\n              !date && \"text-muted-foreground\"\n            )}\n          >\n            <CalendarIcon />\n            {date?.from ? (\n              date.to ? (\n                <>\n                  {format(date.from, \"LLL dd, y\")} -{\" \"}\n                  {format(date.to, \"LLL dd, y\")}\n                </>\n              ) : (\n                format(date.from, \"LLL dd, y\")\n              )\n            ) : (\n              <span>{placeholder}</span>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n          <Calendar\n            initialFocus\n            mode=\"range\"\n            defaultMonth={date?.from}\n            selected={date}\n            onSelect={onDateChange}\n            numberOfMonths={2}\n          />\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/form/date-range.tsx"
    },
    {
      "path": "blocks/auth/components/form/input.tsx",
      "content": "import React from \"react\"\nimport { LucideIcon } from \"lucide-react\"\nimport { FieldValues } from \"react-hook-form\"\n\nimport {\n  FormControl,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\n\ninterface MainInputProps {\n  label: string\n  type: string\n  placeholder?: string\n  required?: boolean\n  field: FieldValues\n  icon?: LucideIcon\n  disabled?: boolean\n  className?: string\n}\n\nexport function MainInput({\n  field,\n  label,\n  type,\n  placeholder,\n  required,\n  icon: Icon,\n  disabled,\n  className,\n}: MainInputProps) {\n  return (\n    <FormItem className={className}>\n      {label && (\n        <FormLabel>\n          <div className=\"flex justify-between items-center w-full\">\n            {label}\n          </div>\n        </FormLabel>\n      )}\n      <FormControl>\n        <div className=\"relative\">\n          <Input\n            type={type}\n            placeholder={placeholder}\n            required={required}\n            className={Icon ? \"pl-9\" : \"\"}\n            disabled={disabled}\n            {...field}\n          />\n\n          {Icon && (\n            <Icon className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          )}\n        </div>\n      </FormControl>\n      <FormMessage />\n    </FormItem>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/form/input.tsx"
    },
    {
      "path": "blocks/auth/components/form/password-form-field.tsx",
      "content": "import { LucideIcon } from \"lucide-react\"\nimport { FieldValues } from \"react-hook-form\"\n\nimport {\n  FormControl,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { PasswordInput } from \"@/components/ui/password_input\"\n\ninterface IPasswordInputProps {\n  label: string\n  placeholder?: string\n  required?: boolean\n  field: FieldValues\n  icon?: LucideIcon\n  disabled?: boolean\n  className?: string\n  autoComplete?: string\n}\n\nexport function PasswordFormItem({\n  field,\n  label,\n  placeholder,\n  required,\n  disabled,\n  className,\n  autoComplete,\n}: IPasswordInputProps) {\n  return (\n    <FormItem className={className}>\n      {label && (\n        <FormLabel>\n          <div className=\"flex justify-between items-center w-full\">\n            {label}\n          </div>\n        </FormLabel>\n      )}\n      <FormControl>\n        <PasswordInput\n          placeholder={placeholder}\n          disabled={disabled}\n          required={required}\n          autoComplete={autoComplete}\n          {...field}\n        />\n      </FormControl>\n      <FormMessage />\n    </FormItem>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/form/password-form-field.tsx"
    },
    {
      "path": "blocks/auth/components/form/phone-input.tsx",
      "content": "import * as React from \"react\"\nimport { CheckIcon, ChevronsUpDown } from \"lucide-react\"\nimport * as RPNInput from \"react-phone-number-input\"\nimport flags from \"react-phone-number-input/flags\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\n\ntype PhoneInputProps = Omit<\n  React.ComponentProps<\"input\">,\n  \"onChange\" | \"value\" | \"ref\"\n> &\n  Omit<RPNInput.Props<typeof RPNInput.default>, \"onChange\"> & {\n    onChange?: (value: RPNInput.Value) => void\n  }\n\nconst PhoneInput: React.ForwardRefExoticComponent<PhoneInputProps> =\n  React.forwardRef<React.ElementRef<typeof RPNInput.default>, PhoneInputProps>(\n    ({ className, onChange, ...props }, ref) => {\n      return (\n        <RPNInput.default\n          ref={ref}\n          className={cn(\"flex\", className)}\n          flagComponent={FlagComponent}\n          countrySelectComponent={CountrySelect}\n          defaultCountry=\"SG\"\n          inputComponent={InputComponent}\n          smartCaret={false}\n          /**\n           * Handles the onChange event.\n           *\n           * react-phone-number-input might trigger the onChange event as undefined\n           * when a valid phone number is not entered. To prevent this,\n           * the value is coerced to an empty string.\n           *\n           * @param {E164Number | undefined} value - The entered value\n           */\n          onChange={(value) => onChange?.(value || (\"\" as RPNInput.Value))}\n          {...props}\n        />\n      )\n    }\n  )\nPhoneInput.displayName = \"PhoneInput\"\n\nconst InputComponent = React.forwardRef<\n  HTMLInputElement,\n  React.ComponentProps<\"input\">\n>(({ className, ...props }, ref) => (\n  <Input\n    className={cn(\"rounded-e-lg rounded-s-none\", className)}\n    {...props}\n    ref={ref}\n  />\n))\nInputComponent.displayName = \"InputComponent\"\n\ntype CountryEntry = { label: string; value: RPNInput.Country | undefined }\n\ntype CountrySelectProps = {\n  disabled?: boolean\n  value: RPNInput.Country\n  options: CountryEntry[]\n  onChange: (country: RPNInput.Country) => void\n}\n\nconst CountrySelect = ({\n  disabled,\n  value: selectedCountry,\n  options: countryList,\n  onChange,\n}: CountrySelectProps) => {\n  // Sắp xếp danh sách quốc gia, đưa Singapore lên đầu tiên\n  const sortedCountryList = React.useMemo(() => {\n    const list = [...countryList]\n    // Tìm vị trí Singapore trong danh sách\n    const sgIndex = list.findIndex((item) => item.value === \"SG\")\n\n    // Nếu tìm thấy và không phải ở vị trí đầu, di chuyển Singapore lên đầu\n    if (sgIndex > 0) {\n      const sgItem = list.splice(sgIndex, 1)[0]\n      list.unshift(sgItem)\n    }\n\n    return list\n  }, [countryList])\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          className=\"flex gap-1 rounded-e-none rounded-s-lg border-r-0 px-3 focus:z-10\"\n          disabled={disabled}\n        >\n          <FlagComponent\n            country={selectedCountry}\n            countryName={selectedCountry}\n          />\n          <ChevronsUpDown\n            className={cn(\n              \"-mr-2 size-4 opacity-50\",\n              disabled ? \"hidden\" : \"opacity-100\"\n            )}\n          />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[300px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search country...\" />\n          <CommandList>\n            <ScrollArea className=\"h-72\">\n              <CommandEmpty>No country found.</CommandEmpty>\n              <CommandGroup>\n                {sortedCountryList.map(({ value, label }) =>\n                  value ? (\n                    <CountrySelectOption\n                      key={value}\n                      country={value}\n                      countryName={label}\n                      selectedCountry={selectedCountry}\n                      onChange={onChange}\n                    />\n                  ) : null\n                )}\n              </CommandGroup>\n            </ScrollArea>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\ninterface CountrySelectOptionProps extends RPNInput.FlagProps {\n  selectedCountry: RPNInput.Country\n  onChange: (country: RPNInput.Country) => void\n}\n\nconst CountrySelectOption = ({\n  country,\n  countryName,\n  selectedCountry,\n  onChange,\n}: CountrySelectOptionProps) => {\n  return (\n    <CommandItem className=\"gap-2\" onSelect={() => onChange(country)}>\n      <FlagComponent country={country} countryName={countryName} />\n      <span className=\"flex-1 text-sm\">{countryName}</span>\n      <span className=\"text-sm text-foreground/50\">{`+${RPNInput.getCountryCallingCode(\n        country\n      )}`}</span>\n      <CheckIcon\n        className={`ml-auto size-4 ${\n          country === selectedCountry ? \"opacity-100\" : \"opacity-0\"\n        }`}\n      />\n    </CommandItem>\n  )\n}\n\nconst FlagComponent = ({ country, countryName }: RPNInput.FlagProps) => {\n  const Flag = flags[country]\n\n  return (\n    <span className=\"flex h-4 w-6 overflow-hidden rounded-sm bg-foreground/20 [&_svg]:!size-full\">\n      {Flag && <Flag title={countryName} />}\n    </span>\n  )\n}\n\nexport { PhoneInput }\n",
      "type": "registry:component",
      "target": "components/form/phone-input.tsx"
    },
    {
      "path": "blocks/auth/components/form/select.tsx",
      "content": "import React from \"react\"\nimport { FieldValues } from \"react-hook-form\"\n\nimport {\n  FormControl,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\n\ninterface IMainSelectProps {\n  label: string\n  placeholder?: string\n  field: FieldValues\n  options: {\n    label: string\n    value: string\n  }[]\n  disabled?: boolean\n}\n\nexport function MainSelect({\n  field,\n  label,\n  placeholder,\n  options,\n  disabled,\n}: IMainSelectProps) {\n  return (\n    <FormItem>\n      {label && (\n        <FormLabel>\n          <div className=\"flex justify-between items-center w-full\">\n            {label}\n          </div>\n        </FormLabel>\n      )}\n      <Select\n        disabled={disabled}\n        onValueChange={field.onChange}\n        value={field.value || \"\"}\n        {...field}\n      >\n        <FormControl>\n          <SelectTrigger className=\"w-full\">\n            <SelectValue placeholder={placeholder} />\n          </SelectTrigger>\n        </FormControl>\n        <SelectContent>\n          {options.map((option) => (\n            <SelectItem key={option.value} value={option.value}>\n              {option.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n      <FormMessage />\n    </FormItem>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/form/select.tsx"
    },
    {
      "path": "blocks/auth/components/form/skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\"\n\nexport default function SkeletonForm() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-2 gap-x-4 gap-y-6\">\n        <div className=\"col-span-1 space-y-2\">\n          <Skeleton className=\"h-4 w-full\" />\n          <Skeleton className=\"h-10 w-full\" />\n        </div>\n        <div className=\"col-span-1 space-y-2\">\n          <Skeleton className=\"h-4 w-full\" />\n          <Skeleton className=\"h-10 w-full\" />\n        </div>\n        <div className=\"col-span-1 space-y-2\">\n          <Skeleton className=\"h-4 w-full\" />\n          <Skeleton className=\"h-10 w-full\" />\n        </div>\n        <div className=\"col-span-1 space-y-2\">\n          <Skeleton className=\"h-4 w-full\" />\n          <Skeleton className=\"h-10 w-full\" />\n        </div>\n        <div className=\"col-span-1 space-y-2\">\n          <Skeleton className=\"h-4 w-full\" />\n          <Skeleton className=\"h-10 w-full\" />\n        </div>\n      </div>\n      <div className=\"flex justify-center items-center gap-4 mt-8\">\n        <Skeleton className=\"h-10 w-[280px]\" />\n        <Skeleton className=\"h-10 w-[280px]\" />\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/form/skeleton.tsx"
    },
    {
      "path": "blocks/auth/components/form/textarea.tsx",
      "content": "import React from \"react\"\nimport { LucideIcon } from \"lucide-react\"\nimport { FieldValues } from \"react-hook-form\"\n\nimport {\n  FormControl,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Textarea } from \"@/components/ui/textarea\"\n\ninterface MainInputProps {\n  label: string\n  type: string\n  placeholder?: string\n  required?: boolean\n  field: FieldValues\n  icon?: LucideIcon\n  children?: React.ReactNode\n  disabled?: boolean\n}\n\nexport function MainTextarea({\n  field,\n  label,\n  placeholder,\n  required,\n  icon: Icon,\n  disabled,\n}: MainInputProps) {\n  return (\n    <FormItem>\n      {label && (\n        <FormLabel>\n          <div className=\"flex justify-between items-center w-full\">\n            {label}\n          </div>\n        </FormLabel>\n      )}\n\n      <FormControl>\n        <div className=\"relative\">\n          <Textarea\n            placeholder={placeholder}\n            required={required}\n            className={Icon ? \"pl-9\" : \"\"}\n            disabled={disabled}\n            {...field}\n          />\n\n          {Icon && (\n            <Icon className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          )}\n        </div>\n      </FormControl>\n      <FormMessage />\n    </FormItem>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/form/textarea.tsx"
    },
    {
      "path": "blocks/auth/data/auth/index.ts",
      "content": "import { GetMeResponse, IApiResponse, LoginResponse } from \"@/types\"\nimport { handleApiResponse } from \"@/utils/api-utils\"\nimport { LoginFormValues } from \"@/validations/auth\"\nimport { useMutation, useQuery } from \"@tanstack/react-query\"\nimport Cookies from \"js-cookie\"\n\nimport { Model } from \"../../data\"\nimport { IServiceConstructorData } from \"../core/net\"\n\nfunction getToken() {\n  const token = Cookies.get(\"token\")\n  if (!token) return\n  return `Bearer ${token}`\n}\n\n// Define interface for reset password request\nexport interface IResetPasswordRequest {\n  token: string\n  password: string\n}\n\n// export interface IAuth {}\n\nexport class Auth extends Model {\n  static login(body: { email: string; password: string }) {\n    return this.api\n      .post<LoginResponse>({\n        url: `/login`,\n        data: body,\n      })\n      .then((r) => handleApiResponse(r.data))\n  }\n\n  static getMe() {\n    return this.api\n      .get<GetMeResponse>({\n        url: `/me`,\n      })\n      .then((r) => handleApiResponse(r.data))\n  }\n\n  static forgotPassword(email: string) {\n    return this.api\n      .post<IApiResponse<unknown>>({\n        url: `/forgot-password`,\n        data: { email },\n      })\n      .then((r) => handleApiResponse(r.data))\n  }\n\n  static resetPassword(data: IResetPasswordRequest) {\n    return this.api\n      .post<IApiResponse<unknown>>({\n        url: `/reset-password`,\n        data,\n      })\n      .then((r) => handleApiResponse(r.data))\n  }\n\n  static logout() {\n    Cookies.remove(\"token\")\n    return Promise.resolve({ success: true })\n  }\n}\n\nconst modelConfig: IServiceConstructorData = {\n  path: \"/\",\n  baseUrl: process.env.NEXT_PUBLIC_API_URL || \"https://wtms.ftech.ltd/api\",\n  auth: getToken,\n}\n\nAuth.setup(modelConfig)\n\nexport function useLogin() {\n  return useMutation({\n    mutationKey: [\"login\"],\n    mutationFn: (data: LoginFormValues) => Auth.login(data),\n  })\n}\n\nexport function useGetMe() {\n  return useQuery({\n    queryKey: [\"currentUser\"],\n    queryFn: () => Auth.getMe(),\n    refetchOnWindowFocus: false,\n  })\n}\n\nexport function useForgotPassword() {\n  return useMutation({\n    mutationKey: [\"forgotPassword\"],\n    mutationFn: (email: string) => Auth.forgotPassword(email),\n  })\n}\n\nexport function useResetPassword() {\n  return useMutation({\n    mutationKey: [\"resetPassword\"],\n    mutationFn: (data: IResetPasswordRequest) => Auth.resetPassword(data),\n  })\n}\n\nexport function useLogout() {\n  return useMutation({\n    mutationKey: [\"logout\"],\n    mutationFn: () => Auth.logout(),\n  })\n}\n\n// Keeping these for backward compatibility\nexport function useUpdateAuth(id: string, data: Record<string, unknown>) {\n  return useMutation({\n    mutationKey: [\"updateAuth\", id],\n    mutationFn: () => Auth.update(id, data),\n  })\n}\n\nexport function useDeleteAuth(id: string) {\n  return useMutation({\n    mutationKey: [\"deleteAuth\", id],\n    mutationFn: () => Auth.delete(id),\n  })\n}\n",
      "type": "registry:lib",
      "target": "data/auth/index.ts"
    },
    {
      "path": "blocks/auth/data/core/model.ts",
      "content": "import { Api, type IServiceConstructorData } from \"../core/net\"\n\n/**\n * Core model, every model extend this class have a static init method use to implement http service adapter,\n * that's all\n */\nexport class Model {\n  static api: Api\n  static path: string\n  static setup(\n    modelConfig: IServiceConstructorData = {\n      path: \"\",\n    }\n  ) {\n    this.api = new Api(modelConfig)\n    this.path = modelConfig.path\n  }\n  // create user\n  static create<T>(data: any) {\n    return this.api.post<T>({\n      url: this.path,\n      data,\n    })\n  }\n  static get<T>(id: string) {\n    return this.api.get<T>({\n      url: `${this.path}/${id}`,\n    })\n  }\n  // update\n  static update<T>(id: string, data: any) {\n    return this.api.put<T>({\n      url: `${this.path}/${id}`,\n      data,\n    })\n  }\n  // delete\n  static delete<T>(id: string) {\n    return this.api.delete<T>({\n      url: `${this.path}/${id}`,\n    })\n  }\n  // list\n  static list<T>(params: any) {\n    return this.api.get<T>({\n      url: this.path,\n      params,\n    })\n  }\n}\n",
      "type": "registry:lib",
      "target": "data/core/model.ts"
    },
    {
      "path": "blocks/auth/data/core/net/api.ts",
      "content": "import axios, {\n  AxiosError,\n  type AxiosInstance,\n  type AxiosRequestConfig,\n  type CreateAxiosDefaults,\n} from \"axios\"\nimport Cookies from \"js-cookie\"\n\ninterface IServerError {\n  detail: string\n  message: string\n  error: string\n  errors: Record<string, string[]> | string[][]\n}\n\nexport interface IHttpError {\n  status?: number\n  status_code?: string\n  message: string\n  errors: Record<string, string[]> | string[][] | undefined\n}\n\nexport interface IServiceConstructorData {\n  /**\n   * The API Server base path, for example `/posts`\n   */\n  path: string\n  baseUrl?: string\n  auth?: () => string | undefined\n}\n\nexport class Api {\n  http: AxiosInstance = axios.create()\n\n  path = \"\"\n\n  /**\n   * The service setting up responsibilities are:\n   * - Set up the http client base url\n   * @param config\n   */\n  constructor(config: IServiceConstructorData) {\n    const { path, baseUrl, auth } = config\n    this.path = path\n    let Authorization = undefined\n    if (typeof window !== \"undefined\") {\n      Authorization = auth?.()\n    }\n\n    const instanceConfig: CreateAxiosDefaults = {\n      headers: {\n        Authorization,\n      },\n      baseURL: baseUrl,\n    }\n\n    this.http = axios.create(instanceConfig)\n    this.http.interceptors.response.use((config) => config, this.handleError)\n    this.http.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.status === 401) {\n          Cookies.remove(process.env.AUTH_KEY || \"token\")\n          location.reload()\n        }\n        return this.handleError(error)\n      }\n    )\n\n    // Add request interceptor to include token in every request\n    this.http.interceptors.request.use((config) => {\n      const token = Cookies.get(\"token\")\n      if (token && config.headers) {\n        config.headers.Authorization = `Bearer ${token}`\n      }\n      return config\n    })\n  }\n\n  handleError(err: AxiosError<Partial<IServerError>>) {\n    console.log(err)\n    const finalError: IHttpError = {\n      status: err.response?.status || err.status,\n      message:\n        err?.response?.data?.detail ||\n        err?.response?.data?.message ||\n        err?.response?.data?.error ||\n        err.message,\n      errors: err.response?.data.errors,\n    }\n\n    return Promise.reject(finalError)\n  }\n\n  /**\n   * Overwrite GET method\n   * @param config\n   */\n  get<T>(config: AxiosRequestConfig = {}) {\n    const { url = this.path, ...requestConfig } = config\n    return this.http.get<T>(url, requestConfig)\n  }\n\n  /**\n   * Overwrite POST method\n   * @param config\n   */\n  post<T>(config: AxiosRequestConfig = {}) {\n    const { url = this.path, data, ...params } = config\n    return this.http.post<T>(url, data, params)\n  }\n\n  /**\n   * Overwrite POST FormData method\n   * @param config\n   */\n  postFormData<T>(config: AxiosRequestConfig = {}) {\n    const { url = this.path, data, ...params } = config\n    const headers = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    }\n    return this.http.post<T>(url, data, { ...params, headers })\n  }\n\n  /**\n   * Overwrite PUT method\n   * @param config\n   */\n  put<T>(config: AxiosRequestConfig = {}) {\n    const { url = this.path, data, ...requestConfig } = config\n\n    return this.http.put<T>(url, data, requestConfig)\n  }\n\n  putFormData<T>(config: AxiosRequestConfig = {}) {\n    const { url = this.path, data, ...params } = config\n    const headers = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    }\n    return this.http.put<T>(url, data, { ...params, headers })\n  }\n\n  /**\n   * Overwrite PATCH method\n   * @param config\n   */\n  patch<T>(config: AxiosRequestConfig = {}) {\n    const { url = this.path, data, ...requestConfig } = config\n    return this.http.patch<T>(url, data, requestConfig)\n  }\n\n  /**\n   * Overwrite DELETE method\n   * @param config\n   */\n  delete<T>(config: AxiosRequestConfig = {}) {\n    const { url = this.path, ...requestConfig } = config\n\n    return this.http.delete<T>(url, requestConfig)\n  }\n\n  /**\n   * Upload\n   * @return {Promise<T>}\n   * @param config\n   */\n  upload<T>(config: AxiosRequestConfig = {}) {\n    const { url = this.path, data, ...requestConfig } = config\n\n    return this.http.post<T>(url, data, {\n      ...requestConfig,\n      headers: {\n        ...requestConfig.headers,\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    })\n  }\n\n  uploadFile<T>(url: string, file: File) {\n    const formData = new FormData()\n    formData.append(\"file\", file)\n\n    return this.upload<T>({ url, data: formData })\n  }\n\n  /**\n   * Upload single file\n   * @param {File} file\n   * @param {string} url\n   * @return {Promise<T>}\n   */\n  uploadSingleFile<T>(url: string, file: File, store_id: string) {\n    const formData = new FormData()\n    formData.append(\"file\", file)\n    formData.append(\"store_id\", store_id)\n\n    return this.upload<T>({ url, data: formData })\n  }\n\n  /**\n   * Download single file\n   * @param url\n   * @param fileName\n   */\n  async downloadFile(\n    url: string,\n    fileName: string,\n    options?: AxiosRequestConfig\n  ) {\n    const { data } = await this.http.get(url, {\n      ...options,\n      responseType: \"blob\",\n    })\n\n    const link = document.createElement(\"a\")\n    link.href = URL.createObjectURL(new Blob([data]))\n    link.setAttribute(\"download\", fileName)\n    document.body.appendChild(link)\n    link.click()\n  }\n}\n",
      "type": "registry:lib",
      "target": "data/core/net/api.ts"
    },
    {
      "path": "blocks/auth/data/core/net/index.ts",
      "content": "export * from \"./api\"\n",
      "type": "registry:lib",
      "target": "data/core/net/index.ts"
    },
    {
      "path": "blocks/auth/data/index.ts",
      "content": "export * from \"./core/model\"\n",
      "type": "registry:lib",
      "target": "data/index.ts"
    },
    {
      "path": "blocks/auth/forgot-password/_components/forgot-password-form.tsx",
      "content": "\"use client\"\n\nimport Link from \"next/link\"\nimport { useForgotPassword } from \"@/data/auth\"\nimport {\n  ForgotPasswordFormValues,\n  forgotPasswordSchema,\n} from \"@/validations/auth\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { ArrowLeft } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\n\nexport default function ForgotPasswordForm() {\n  const { mutateAsync: forgotPassword, isPending } = useForgotPassword()\n\n  const form = useForm<ForgotPasswordFormValues>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  })\n\n  async function onSubmit(data: ForgotPasswordFormValues) {\n    try {\n      await forgotPassword(data.email)\n      toast.success(\n        \"Reset link sent! Please check your email inbox. The reset link will expire in 3 minutes.\"\n      )\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : \"Failed to send reset link. Please try again or contact support.\"\n      toast.error(<div dangerouslySetInnerHTML={{ __html: errorMessage }} />)\n    }\n  }\n\n  return (\n    <div className=\"w-full\">\n      <h2 className=\"text-2xl font-bold mb-6\">Forgot Password</h2>\n      <p className=\"text-sm text-gray-500 mb-6\">\n        Enter your email address and we&apos;ll send you a link to reset your\n        password\n      </p>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"example@domain.com\"\n                    type=\"email\"\n                    autoComplete=\"email\"\n                    disabled={isPending}\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-black hover:bg-black/90\"\n            loading={isPending}\n          >\n            Send Reset Link\n          </Button>\n\n          <div className=\"text-center mt-4\">\n            <Link\n              href=\"/login\"\n              className=\"text-sm text-primary hover:underline flex items-center justify-center\"\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Login\n            </Link>\n          </div>\n        </form>\n      </Form>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "forgot-password/_components/forgot-password-form.tsx"
    },
    {
      "path": "blocks/auth/forgot-password/page.tsx",
      "content": "import ForgotPasswordForm from \"@/app/(auth)/forgot-password/_components/forgot-password-form\"\n\nexport default function ForgotPasswordPage() {\n  return <ForgotPasswordForm />\n}\n",
      "type": "registry:page",
      "target": "ftech/page.tsx"
    },
    {
      "path": "blocks/auth/layout.tsx",
      "content": "import { ReactNode, Suspense } from \"react\"\nimport Image from \"next/image\"\nimport { Loader2 } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface AuthLayoutProps {\n  children: ReactNode\n}\n\nexport default function AuthLayout({ children }: AuthLayoutProps) {\n  return (\n    <div className=\"flex min-h-screen w-full items-center justify-center bg-[#F8F8F8] p-4 md:p-6 lg:p-8\">\n      <div\n        className={cn(\n          \"bg-white overflow-hidden rounded-lg shadow-md min-h-[550px] w-full max-w-md lg:max-w-5xl grid grid-cols-2\"\n        )}\n      >\n        <div className=\"relative hidden lg:flex bg-[#18181B]\">\n          {/* Background elements */}\n          <div className=\"absolute top-0 left-0 w-full h-full overflow-hidden\">\n            <div className=\"absolute -top-20 -left-28\">\n              <Image\n                src=\"/images/Login/D_1.svg\"\n                width={302}\n                height={356}\n                alt=\"Background shape 1\"\n                priority\n              />\n            </div>\n\n            <div className=\"absolute -top-56 -left-20\">\n              <Image\n                src=\"/images/Login/D_2.svg\"\n                width={422}\n                height={495}\n                alt=\"Background shape 2\"\n                priority\n              />\n            </div>\n          </div>\n\n          <div className=\"absolute bottom-10 right-10 z-10 flex flex-col items-start\">\n            <div className=\"mb-4\">\n              <Image\n                src=\"/images/Login/logo.svg\"\n                width={48}\n                height={48}\n                alt=\"Liang Yi logo\"\n                priority\n              />\n            </div>\n            <h2 className=\"text-[28px] font-semibold text-white\">Liang Yi</h2>\n          </div>\n        </div>\n\n        {/* Form elements */}\n        <div className=\"w-full h-full p-8 md:px-16 md:py-10 flex flex-col items-center justify-center mx-auto col-span-2 lg:col-span-1\">\n          <Suspense\n            fallback={\n              <div className=\"h-full w-full flex items-center justify-center\">\n                <Loader2 className=\"h-12 w-12 animate-spin\" />\n              </div>\n            }\n          >\n            {children}\n          </Suspense>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "layout.tsx"
    },
    {
      "path": "blocks/auth/lib/helper.ts",
      "content": "import dayjs from \"dayjs\"\nimport numeral from \"numeral\"\n\n// Split helpers into categories for better organization and maintainability.\n\n// Number formatting helper\nexport function formatNumber(value: number, format: string = \"0,0\"): string {\n  return numeral(value).format(format)\n}\n\n// Date-time formatting helper\nexport function formatDate(\n  date: string | Date,\n  format: string = \"YYYY-MM-DD\"\n): string {\n  return dayjs(date).format(format)\n}\n\n// Array Helpers\nexport function removeDuplicates<T>(array: T[]): T[] {\n  return Array.from(new Set(array))\n}\n\nexport function arrayIntersection<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter((value) => array2.includes(value))\n}\n\n// Local Storage Helpers\nexport function saveToLocalStorage<T>(key: string, value: T): void {\n  localStorage.setItem(key, JSON.stringify(value))\n}\n\nexport function getFromLocalStorage<T>(key: string): T | null {\n  const item = localStorage.getItem(key)\n  return item ? JSON.parse(item) : null\n}\n\n// Validation Helpers\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email)\n}\n\nexport function isValidURL(url: string): boolean {\n  try {\n    new URL(url)\n    return true\n  } catch {\n    return false\n  }\n}\n\n// String Manipulation Helpers\nexport function capitalizeFirstLetter(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n\nexport function toCamelCase(str: string): string {\n  return str\n    .replace(/[-_](.)/g, (_, char) => char.toUpperCase())\n    .replace(/^(.)/, (_, char) => char.toLowerCase())\n}\n\nexport function toKebabCase(str: string): string {\n  return str\n    .replace(/([a-z])([A-Z])/g, \"$1-$2\")\n    .replace(/\\s+/g, \"-\")\n    .toLowerCase()\n}\n\n// Singapore phone number regex pattern\n// Accepts formats: +65 XXXX XXXX, +65XXXXXXXX, 8XXX XXXX, 9XXX XXXX, etc.\nexport const SINGAPORE_PHONE_REGEX = /^(\\+65[ -]?)?[89]\\d{3}[ -]?\\d{4}$/\n",
      "type": "registry:lib",
      "target": "lib/helper.ts"
    },
    {
      "path": "blocks/auth/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": "lib/utils.ts"
    },
    {
      "path": "blocks/auth/login/_components/login-form.tsx",
      "content": "\"use client\"\n\nimport Link from \"next/link\"\nimport { useRouter, useSearchParams } from \"next/navigation\"\nimport { DEFAULT_ROUTE, ROUTE_CONFIG } from \"@/constants/routes\"\nimport { useAuth } from \"@/context/auth-context\"\nimport { useLogin } from \"@/data/auth\"\nimport { LoginFormValues, loginSchema } from \"@/validations/auth\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport Cookies from \"js-cookie\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nimport { PasswordInput } from \"@/components/ui/password_input\"\n\nexport default function LoginForm() {\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const { mutateAsync: login, isPending } = useLogin()\n  const { setUser } = useAuth()\n\n  const form = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  })\n\n  async function onSubmit(values: LoginFormValues) {\n    try {\n      const data = await login(values)\n      if (data && data.access_token) {\n        Cookies.set(\"token\", data.access_token)\n        if (data.user) {\n          setUser(data.user)\n        }\n        const callbackUrl =\n          searchParams.get(ROUTE_CONFIG.CALLBACK_URL_PARAM) || DEFAULT_ROUTE\n        router.push(callbackUrl)\n      } else {\n        throw new Error(\"Login failed, please try again!\")\n      }\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : \"Login failed, please try again!\"\n      toast.error(<div dangerouslySetInnerHTML={{ __html: errorMessage }} />)\n    }\n  }\n\n  return (\n    <div className=\"w-full\">\n      <h2 className=\"text-2xl font-bold mb-6\">Login</h2>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"example@domain.com\"\n                    type=\"email\"\n                    autoComplete=\"email\"\n                    disabled={isPending}\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Password</FormLabel>\n                <FormControl>\n                  <PasswordInput\n                    placeholder=\"********\"\n                    autoComplete=\"current-password\"\n                    disabled={isPending}\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-black hover:bg-black/90\"\n            loading={isPending}\n          >\n            Login\n          </Button>\n          <div className=\"text-right mt-2\">\n            <Link\n              href=\"/forgot-password\"\n              className=\"text-sm font-medium text-primary hover:underline\"\n            >\n              Forgot Password?\n            </Link>\n          </div>\n        </form>\n      </Form>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "login/_components/login-form.tsx"
    },
    {
      "path": "blocks/auth/login/page.tsx",
      "content": "import LoginForm from \"@/app/login/_components/login-form\"\n\nexport default function LoginPage() {\n  return <LoginForm />\n}\n",
      "type": "registry:page",
      "target": "ftech/page.tsx"
    },
    {
      "path": "blocks/auth/reset-password/_components/reset-password-form.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport Link from \"next/link\"\nimport { useRouter, useSearchParams } from \"next/navigation\"\nimport { IResetPasswordRequest, useResetPassword } from \"@/data/auth\"\nimport {\n  ResetPasswordFormValues,\n  resetPasswordSchema,\n} from \"@/validations/auth\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { AlertCircle } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\n\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { PasswordInput } from \"@/components/ui/password_input\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\n\nexport default function ResetPasswordForm() {\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const token = searchParams.get(\"token\")\n  const expiration = searchParams.get(\"exp\")\n\n  // Add a loading state\n  const [isLoading, setIsLoading] = useState(true)\n  const [isExpired, setIsExpired] = useState(false)\n  const [remainingTime, setRemainingTime] = useState<string>(\"\")\n  const [expiryTimeMs, setExpiryTimeMs] = useState<number | null>(null)\n\n  const { mutateAsync: resetPassword, isPending } = useResetPassword()\n\n  // Format seconds to mm:ss\n  const formatTime = (totalSeconds: number) => {\n    const minutes = Math.floor(totalSeconds / 60)\n    const seconds = totalSeconds % 60\n    return `${minutes.toString().padStart(2, \"0\")}:${seconds\n      .toString()\n      .padStart(2, \"0\")}`\n  }\n\n  // Initialize expiry time\n  useEffect(() => {\n    // Simulate minimum loading time to avoid UI flash\n    const minLoadingTime = 100 // 100ms minimum loading time\n\n    if (expiration) {\n      const expiryTime = parseInt(expiration, 10)\n      const currentTime = Date.now()\n\n      if (currentTime > expiryTime) {\n        setTimeout(() => {\n          setIsExpired(true)\n          setIsLoading(false)\n        }, minLoadingTime)\n        return\n      }\n\n      setExpiryTimeMs(expiryTime)\n\n      setTimeout(() => {\n        setIsLoading(false)\n      }, minLoadingTime)\n    } else {\n      setTimeout(() => {\n        setIsLoading(false)\n      }, minLoadingTime)\n    }\n  }, [expiration])\n\n  // Countdown timer\n  useEffect(() => {\n    if (!expiryTimeMs) return\n\n    const updateRemainingTime = () => {\n      const currentTime = Date.now()\n      const timeRemaining = expiryTimeMs - currentTime\n\n      if (timeRemaining <= 0) {\n        setIsExpired(true)\n        setRemainingTime(\"00:00\")\n        return\n      }\n\n      // Convert to seconds for the format\n      const totalSeconds = Math.floor(timeRemaining / 1000)\n      setRemainingTime(formatTime(totalSeconds))\n    }\n\n    // Initial update\n    updateRemainingTime()\n\n    // Update every second\n    const intervalId = setInterval(updateRemainingTime, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [expiryTimeMs])\n\n  const form = useForm<ResetPasswordFormValues>({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  })\n\n  async function onSubmit(data: ResetPasswordFormValues) {\n    if (!token) {\n      toast.error(\"Reset token is missing. Please try the reset link again.\")\n      return\n    }\n\n    if (isExpired) {\n      toast.error(\n        \"Reset link has expired. Please request a new password reset link.\"\n      )\n      return\n    }\n\n    try {\n      const resetData: IResetPasswordRequest = {\n        token,\n        password: data.password,\n      }\n\n      await resetPassword(resetData)\n      toast.success(\"Password reset successful!\")\n      router.push(\"/login\")\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : \"Failed to reset password. Please try again.\"\n      toast.error(<div dangerouslySetInnerHTML={{ __html: errorMessage }} />)\n    }\n  }\n\n  // Show loading skeleton while checking expiration\n  if (isLoading) {\n    return (\n      <div className=\"w-full space-y-6\">\n        <Skeleton className=\"h-16 w-full\" />\n        <div className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-32\" />\n            <Skeleton className=\"h-10 w-full\" />\n          </div>\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-32\" />\n            <Skeleton className=\"h-10 w-full\" />\n          </div>\n          <Skeleton className=\"h-10 w-full\" />\n        </div>\n      </div>\n    )\n  }\n\n  if (isExpired) {\n    return (\n      <div className=\"w-full\">\n        <h2 className=\"text-2xl font-bold mb-6\">Link Expired</h2>\n        <Alert variant=\"destructive\" className=\"mb-6\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertTitle>Reset Link Expired</AlertTitle>\n          <AlertDescription>\n            This password reset link has expired. Please request a new one.\n          </AlertDescription>\n        </Alert>\n        <Link\n          href=\"/forgot-password\"\n          className={buttonVariants({\n            className: \"w-full bg-black hover:bg-black/90\",\n          })}\n        >\n          Request New Link\n        </Link>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"w-full\">\n      <h2 className=\"text-2xl font-bold mb-6\">Create new password</h2>\n      <p className=\"text-sm text-gray-500 mb-6\">\n        Enter your new password below\n      </p>\n\n      {remainingTime && (\n        <Alert className=\"mb-6\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertTitle>Time Sensitive</AlertTitle>\n          <AlertDescription className=\"flex\">\n            This reset link will expire in{\" \"}\n            <span className=\"font-medium text-destructive\">\n              {remainingTime}\n            </span>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <FormField\n            control={form.control}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>New Password</FormLabel>\n                <FormControl>\n                  <PasswordInput\n                    placeholder=\"Enter new password\"\n                    disabled={isPending}\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"confirmPassword\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Confirm Password</FormLabel>\n                <FormControl>\n                  <PasswordInput\n                    placeholder=\"Confirm new password\"\n                    disabled={isPending}\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-black hover:bg-black/90\"\n            loading={isPending}\n          >\n            Save\n          </Button>\n        </form>\n      </Form>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "reset-password/_components/reset-password-form.tsx"
    },
    {
      "path": "blocks/auth/reset-password/page.tsx",
      "content": "import ResetPasswordForm from \"@/app/reset-password/_components/reset-password-form\"\n\nexport default function ResetPasswordPage() {\n  return <ResetPasswordForm />\n}\n",
      "type": "registry:page",
      "target": "ftech/page.tsx"
    },
    {
      "path": "blocks/auth/types/auth.ts",
      "content": "import { IApiResponse, IUser } from \"@/types\"\n\nexport interface ILoginResponse {\n  access_token: string\n  user: IUser\n}\n\nexport interface IMeResponse {\n  user: IUser\n}\n\nexport type LoginResponse = IApiResponse<ILoginResponse>\nexport type GetMeResponse = IApiResponse<IMeResponse>\n",
      "type": "registry:lib",
      "target": "types/auth.ts"
    },
    {
      "path": "blocks/auth/types/global.ts",
      "content": "export interface IMeta {\n  page: number\n  size: number\n  total: number\n}\n\n// Base response model for all API responses\nexport interface IApiResponse<T> {\n  status: \"success\" | \"error\"\n  data: T | null\n  error_message: string\n  error_code: string | number\n}\n\nexport interface IListData<T> {\n  items: T[]\n  limit: number\n  page: number\n  total: number\n}\n\nexport type GetListResponse<T> = IApiResponse<IListData<T>>\n\nexport type TableState = {\n  filters: Record<string, string>\n  sortBy?: string\n  sortDirection?: \"asc\" | \"desc\"\n}\n",
      "type": "registry:lib",
      "target": "types/global.ts"
    },
    {
      "path": "blocks/auth/types/index.ts",
      "content": "export * from \"./global\"\nexport * from \"./auth\"\n",
      "type": "registry:lib",
      "target": "types/index.ts"
    },
    {
      "path": "blocks/auth/utils/api-utils.ts",
      "content": "import { IApiResponse } from \"@/types\"\n\nexport function handleApiResponse<T>(response: IApiResponse<T>): T | null {\n  if (response.status === \"error\") {\n    throw new Error(response.error_message || \"An unknown error occurred\")\n  }\n\n  return response.data\n}\n\n/**\n * Safely access localStorage to avoid SSR issues\n */\nexport const safeLocalStorage = {\n  setItem: <T>(key: string, value: T): void => {\n    if (typeof window !== \"undefined\") {\n      localStorage.setItem(key, JSON.stringify(value))\n    }\n  },\n  getItem: <T>(key: string): T | null => {\n    if (typeof window !== \"undefined\") {\n      const item = localStorage.getItem(key)\n      return item ? JSON.parse(item) : null\n    }\n    return null\n  },\n  removeItem: (key: string): void => {\n    if (typeof window !== \"undefined\") {\n      localStorage.removeItem(key)\n    }\n  },\n}\n",
      "type": "registry:lib",
      "target": "utils/api-utils.ts"
    },
    {
      "path": "blocks/auth/validators/auth.ts",
      "content": "import * as z from \"zod\"\n\nexport const loginSchema = z.object({\n  email: z.string().email({\n    message: \"Invalid email address.\",\n  }),\n  password: z.string().min(8, {\n    message: \"Password must be at least 8 characters.\",\n  }),\n})\n\nexport const registerSchema = z\n  .object({\n    name: z.string().min(1, {\n      message: \"Name cannot be empty.\",\n    }),\n    email: z.string().email({\n      message: \"Invalid email address.\",\n    }),\n    password: z.string().min(8, {\n      message: \"Password must be at least 8 characters.\",\n    }),\n    confirmPassword: z.string(),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords do not match.\",\n    path: [\"confirmPassword\"],\n  })\n\nexport const forgotPasswordSchema = z.object({\n  email: z.string().email({\n    message: \"Invalid email address.\",\n  }),\n})\n\nexport const resetPasswordSchema = z\n  .object({\n    password: z\n      .string()\n      .min(8, {\n        message: \"Password must be at least 8 characters.\",\n      })\n      .max(100, {\n        message: \"Password must be less than 100 characters.\",\n      })\n      .regex(/[A-Z]/, {\n        message: \"Password must contain at least one uppercase letter.\",\n      })\n      .regex(/[a-z]/, {\n        message: \"Password must contain at least one lowercase letter.\",\n      })\n      .regex(/[0-9]/, {\n        message: \"Password must contain at least one number.\",\n      })\n      .regex(/[^A-Za-z0-9]/, {\n        message: \"Password must contain at least one special character.\",\n      }),\n    confirmPassword: z.string(),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords do not match.\",\n    path: [\"confirmPassword\"],\n  })\n\nexport type LoginFormValues = z.infer<typeof loginSchema>\nexport type RegisterFormValues = z.infer<typeof registerSchema>\nexport type ForgotPasswordFormValues = z.infer<typeof forgotPasswordSchema>\nexport type ResetPasswordFormValues = z.infer<typeof resetPasswordSchema>\n",
      "type": "registry:lib",
      "target": "validators/auth.ts"
    }
  ],
  "categories": [
    "ftech-internal"
  ]
}